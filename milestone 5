const int red = 30;     //Present at PF1
const int green = 39;   //Present at PF2

// Motor Control Pins
#define enA     14 //  PB6
#define enB     26 //  PD3
#define LEFT_IN1     12 // PA2
#define LEFT_IN2     11 // PA3
#define RIGHT_IN3    28 // PE2
#define RIGHT_IN4    24 // PD1

// Ultrasonic Sensor Pins
#define TRIG_1   34 //FRONT
#define ECHO_1   29
#define TRIG_2   25 //LEFT
#define ECHO_2   38
#define TRIG_3   9   //RIGHT
#define ECHO_3   10


#define buz 31 //buzzer pin

int STOP_DISTANCE = 14;
int WALL_DISTANCE = 4;
long F, L, R;
bool isRunning = false;  // Flag to control motor operation
char command;

void setup() {
    Serial.begin(9600);

    // Configure motor pins
    pinMode(LEFT_IN1, OUTPUT);
    pinMode(LEFT_IN2, OUTPUT);
    pinMode(RIGHT_IN3, OUTPUT);
    pinMode(RIGHT_IN4, OUTPUT);
    pinMode(enB, OUTPUT);
    pinMode(enA, OUTPUT);
    
    // Configure ultrasonic sensor pins
    pinMode(TRIG_1, OUTPUT);
    pinMode(ECHO_1, INPUT);
    pinMode(TRIG_2, OUTPUT);
    pinMode(ECHO_2, INPUT);
    pinMode(TRIG_3, OUTPUT);
    pinMode(ECHO_3, INPUT);

    pinMode(red, OUTPUT);   //Red color pwm pin defined as output
    pinMode(green, OUTPUT); //Green color pwm pin defined as output

    pinMode(buz, OUTPUT); //buzzer pin
    
    analogWrite(red, 0);
    analogWrite(green, 0);

    Serial.println("Robot ready! Send 'a' to start, 'b' to stop");
}

void loop() {
    // Bluetooth commands
    if (Serial.available() > 0) {
        command = Serial.read();
        Serial.println(command);

        if (command == 'a') {
            isRunning = true;
            Serial.println("Motors activated");
            analogWrite(red, 0);
            analogWrite(green, 255);
        } else if (command == 'b') {
            isRunning = false;
            stopMotors();
            Serial.println("Motors stopped");
            analogWrite(red, 255);
            analogWrite(green, 0);
        }
    }

    if (isRunning) {
        long F = getDistance(TRIG_1, ECHO_1);  // Front
        long L = getDistance(TRIG_2, ECHO_2);  // Left
        long R = getDistance(TRIG_3, ECHO_3);  // Right

        Serial.print("F: "); Serial.print(F);
        Serial.print(" cm, L: "); Serial.print(L);
        Serial.print(" cm, R: "); Serial.println(R);

        if (F <= 2 || L <= 2 || R <= 2) {
    Serial.println("Too close to an object. Reversing slightly to readjust.");
    if (R <= 2) {
        reverseMotors("right");
    } else if (L <= 2) {
        reverseMotors("left");
    } else {
        reverseMotors("front");
    }
}
        else if (F < STOP_DISTANCE) {
            stopMotors();
            delay(100);
            if (L > STOP_DISTANCE && R > STOP_DISTANCE) {
                Serial.println("Front blocked. Both sides open. Turning left.");
                Move_Left();
            } else if (L > STOP_DISTANCE) {
                Serial.println("Front blocked. Turning left.");
                Move_Left();
            } else if (R > STOP_DISTANCE) {
                Serial.println("Front blocked. Turning right.");
                Move_Right();
            } else {
                Serial.println("Blocked in all directions. Stopping.");
                stopMotors();
            }
        } else {
            moveForward();
        }
    } // <-- This was missing
}


void Move_Right() {
    digitalWrite(LEFT_IN1, HIGH);
    digitalWrite(LEFT_IN2, LOW);
    digitalWrite(RIGHT_IN3, LOW);
    digitalWrite(RIGHT_IN4, HIGH);
    analogWrite(enB, 150);
    analogWrite(enA, 0);
    delay(140);
}

void Adjust_Right() {
    digitalWrite(LEFT_IN1, HIGH);
    digitalWrite(LEFT_IN2, LOW);
    digitalWrite(RIGHT_IN3, LOW);
    digitalWrite(RIGHT_IN4, HIGH);
    analogWrite(enB, 80);
    analogWrite(enA, 64);
}

void Adjust_Left() {
    digitalWrite(LEFT_IN1, HIGH);
    digitalWrite(LEFT_IN2, LOW);
    digitalWrite(RIGHT_IN3, LOW);
    digitalWrite(RIGHT_IN4, HIGH);
    analogWrite(enB, 64);
    analogWrite(enA, 80);
}

void Move_Left() {
    digitalWrite(LEFT_IN1, HIGH);
    digitalWrite(LEFT_IN2, LOW);
    digitalWrite(RIGHT_IN3, LOW);
    digitalWrite(RIGHT_IN4, HIGH);
    analogWrite(enB, 0);
    analogWrite(enA, 150);
    delay(140);
}

void moveForward() {
    digitalWrite(LEFT_IN1, HIGH);
    digitalWrite(LEFT_IN2, LOW);
    digitalWrite(RIGHT_IN3, LOW);
    digitalWrite(RIGHT_IN4, HIGH);
    analogWrite(enA, 80);
    analogWrite(enB, 80);
}
void reverseMotors(String fromSide) {
    digitalWrite(buz, HIGH);
    // Step 1: Reverse both motors
    digitalWrite(LEFT_IN1, LOW);
    digitalWrite(LEFT_IN2, HIGH);
    digitalWrite(RIGHT_IN3, HIGH);
    digitalWrite(RIGHT_IN4, LOW);
    analogWrite(enA, 100);
    analogWrite(enB, 100);
    delay(250);  // Reverse duration

    stopMotors();
    delay(100); // Pause after reversing

    // Step 2: Move forward slightly biased away from obstacle
    if (fromSide == "right") {
        Serial.println("Avoiding right obstacle: moving slightly left.");
        analogWrite(enA, 80);  // Left motor faster
        analogWrite(enB, 60);  // Right motor slower for left curve
    } else if (fromSide == "left") {
        Serial.println("Avoiding left obstacle: moving slightly right.");
        analogWrite(enA, 60);  // Left motor slower for right curve
        analogWrite(enB, 80);  // Right motor faster
    } else {
        Serial.println("Avoiding front obstacle: moving straight.");
        analogWrite(enA, 80);  // Move straight
        analogWrite(enB, 80);
    }

    digitalWrite(LEFT_IN1, HIGH);
    digitalWrite(LEFT_IN2, LOW);
    digitalWrite(RIGHT_IN3, LOW);
    digitalWrite(RIGHT_IN4, HIGH);
    delay(300); // Move forward to reorient
    stopMotors();
}



void stopMotors() {
    digitalWrite(LEFT_IN1, HIGH);
    digitalWrite(LEFT_IN2, LOW);
    digitalWrite(RIGHT_IN3, LOW);
    digitalWrite(RIGHT_IN4, HIGH);
    analogWrite(enB, 0);
    analogWrite(enA, 0);
}

long microsecondsToCentimeters(long microseconds) {
    return (microseconds * 0.0343) / 2;
}

long getDistance(int trigPin, int echoPin) {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    long duration = pulseIn(echoPin, HIGH, 10000);
    
    if (duration == 0) {
        return 100;
    }
    
    return microsecondsToCentimeters(duration);
}
